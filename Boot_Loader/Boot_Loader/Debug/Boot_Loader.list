
Boot_Loader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ad8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000c08  08000c08  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000c08  08000c08  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08000c08  08000c08  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c08  08000c08  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c08  08000c08  00010c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c0c  08000c0c  00010c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08000c10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000008  08000c18  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  08000c18  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000ff9  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000081e  00000000  00000000  0002106d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000230  00000000  00000000  00021890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000185  00000000  00000000  00021ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000016d1  00000000  00000000  00021c45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001467  00000000  00000000  00023316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00006309  00000000  00000000  0002477d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000690  00000000  00000000  0002aa88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0002b118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000008 	.word	0x20000008
 800014c:	00000000 	.word	0x00000000
 8000150:	08000bf0 	.word	0x08000bf0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000000c 	.word	0x2000000c
 800016c:	08000bf0 	.word	0x08000bf0

08000170 <ABL_VoidInit>:
#include "ABL_Private.h"
#include "APARSER_Interface.h"


void ABL_VoidInit(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	/*initializing the system clock as configured in the CNFG file*/
	MRCC_voidInitSystemClk();
 8000174:	f000 fc0c 	bl	8000990 <MRCC_voidInitSystemClk>
	/*enable the clock for GPIOA Peripheral*/
	MRCC_voidEnablePeripheralClock(AHB1,MRCC_PERIPHERAL_EN_GPIOA);
 8000178:	2100      	movs	r1, #0
 800017a:	2000      	movs	r0, #0
 800017c:	f000 fb84 	bl	8000888 <MRCC_voidEnablePeripheralClock>
	/*enable the clock for USART1 Peripheral*/
	MRCC_voidEnablePeripheralClock(APB2,MRCC_PERIPHERAL_EN_USART1);
 8000180:	2104      	movs	r1, #4
 8000182:	2003      	movs	r0, #3
 8000184:	f000 fb80 	bl	8000888 <MRCC_voidEnablePeripheralClock>
	/*enable the clock for flash driver peripheral*/
	MRCC_voidEnablePeripheralClock(AHB1LP,MRCC_PERIPHERAL_EN_FDI);
 8000188:	210f      	movs	r1, #15
 800018a:	2004      	movs	r0, #4
 800018c:	f000 fb7c 	bl	8000888 <MRCC_voidEnablePeripheralClock>
	/*set the alternative function of pin 9*/
	MGPIO_voidSetPinMode(MGPIOA_PORT,MGPIO_PIN9,MGPIO_MODE_ALTF) ;
 8000190:	2202      	movs	r2, #2
 8000192:	2109      	movs	r1, #9
 8000194:	2000      	movs	r0, #0
 8000196:	f000 fa3d 	bl	8000614 <MGPIO_voidSetPinMode>
	/*set the alternative function to pin 10*/
	MGPIO_voidSetPinMode(MGPIOA_PORT,MGPIO_PIN10,MGPIO_MODE_ALTF) ;
 800019a:	2202      	movs	r2, #2
 800019c:	210a      	movs	r1, #10
 800019e:	2000      	movs	r0, #0
 80001a0:	f000 fa38 	bl	8000614 <MGPIO_voidSetPinMode>
	/*initialing the USART Peripheral*/
	MUSART_voidInit();
 80001a4:	f000 fc66 	bl	8000a74 <MUSART_voidInit>
	/*enable the UART Peripheral*/
	MUSART_voidEnable();
 80001a8:	f000 fcb2 	bl	8000b10 <MUSART_voidEnable>
	/*enable the systick peripheral*/
	MSTK_voidInit();
 80001ac:	f000 fc0c 	bl	80009c8 <MSTK_voidInit>
	/*waiting to receive the application through UART, if not no application will run*/
	MSTK_voidSetIntervalSingle(NUMBER_OF_TICKS,ABL_VoidJumptoApp);
 80001b0:	4902      	ldr	r1, [pc, #8]	; (80001bc <ABL_VoidInit+0x4c>)
 80001b2:	4803      	ldr	r0, [pc, #12]	; (80001c0 <ABL_VoidInit+0x50>)
 80001b4:	f000 fc36 	bl	8000a24 <MSTK_voidSetIntervalSingle>

}
 80001b8:	bf00      	nop
 80001ba:	bd80      	pop	{r7, pc}
 80001bc:	08000279 	.word	0x08000279
 80001c0:	007a1200 	.word	0x007a1200

080001c4 <ABL_VoidRun>:
void ABL_VoidRun(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b082      	sub	sp, #8
 80001c8:	af00      	add	r7, sp, #0
	/*STATUS VARIABLE FOR RECEIVEING*/
	u8 LOC_u8RecStatus=APP_VALUE_0;
 80001ca:	2300      	movs	r3, #0
 80001cc:	71fb      	strb	r3, [r7, #7]
	/*LOOP TIL HEX FILE IS RECEIVED OR STK TIME HAS EXCEEDED*/
	while(TimeOutFlag == APP_VALUE_0)
 80001ce:	e03c      	b.n	800024a <ABL_VoidRun+0x86>
	{
		/*reading data from UART*/
		LOC_u8RecStatus = MUSART_u8ReadDataSynch(&ReceiveBuffer[u8RecCounter]) ;
 80001d0:	4b23      	ldr	r3, [pc, #140]	; (8000260 <ABL_VoidRun+0x9c>)
 80001d2:	781b      	ldrb	r3, [r3, #0]
 80001d4:	b2db      	uxtb	r3, r3
 80001d6:	461a      	mov	r2, r3
 80001d8:	4b22      	ldr	r3, [pc, #136]	; (8000264 <ABL_VoidRun+0xa0>)
 80001da:	4413      	add	r3, r2
 80001dc:	4618      	mov	r0, r3
 80001de:	f000 fc79 	bl	8000ad4 <MUSART_u8ReadDataSynch>
 80001e2:	4603      	mov	r3, r0
 80001e4:	71fb      	strb	r3, [r7, #7]
		if(LOC_u8RecStatus == APP_VALUE_1)
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	2b01      	cmp	r3, #1
 80001ea:	d12e      	bne.n	800024a <ABL_VoidRun+0x86>
		{
			/*Stop Timer Because Application Code In Processing*/
			MSTK_voidInit();
 80001ec:	f000 fbec 	bl	80009c8 <MSTK_voidInit>
			/*indicate The end Of the Record*/
			if(ReceiveBuffer[u8RecCounter] == '\0')
 80001f0:	4b1b      	ldr	r3, [pc, #108]	; (8000260 <ABL_VoidRun+0x9c>)
 80001f2:	781b      	ldrb	r3, [r3, #0]
 80001f4:	b2db      	uxtb	r3, r3
 80001f6:	461a      	mov	r2, r3
 80001f8:	4b1a      	ldr	r3, [pc, #104]	; (8000264 <ABL_VoidRun+0xa0>)
 80001fa:	5c9b      	ldrb	r3, [r3, r2]
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d115      	bne.n	800022c <ABL_VoidRun+0x68>
			{
				/*erasing the memory for the first time*/
				if(u8WriteReq == APP_VALUE_1)
 8000200:	4b19      	ldr	r3, [pc, #100]	; (8000268 <ABL_VoidRun+0xa4>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	b2db      	uxtb	r3, r3
 8000206:	2b01      	cmp	r3, #1
 8000208:	d109      	bne.n	800021e <ABL_VoidRun+0x5a>
				{
					/*set this led to low to indicate the flashing is started*/
					MGPIO_voidSetPinValue(MGPIOA_PORT,MGPIO_PIN12,MGPIO_LOW);
 800020a:	2200      	movs	r2, #0
 800020c:	210c      	movs	r1, #12
 800020e:	2000      	movs	r0, #0
 8000210:	f000 fa76 	bl	8000700 <MGPIO_voidSetPinValue>
					/*Erase The Application Code*/
					MFDI_voidEraseAppArea() ;
 8000214:	f000 f986 	bl	8000524 <MFDI_voidEraseAppArea>
					/*setting this variable to 1 to avoid erase memory again*/
					u8WriteReq =APP_VALUE_0 ;
 8000218:	4b13      	ldr	r3, [pc, #76]	; (8000268 <ABL_VoidRun+0xa4>)
 800021a:	2200      	movs	r2, #0
 800021c:	701a      	strb	r2, [r3, #0]
				}
				/*Parse The Record and Write it to flash*/
				APARSER_voidParseRecord(ReceiveBuffer) ;
 800021e:	4811      	ldr	r0, [pc, #68]	; (8000264 <ABL_VoidRun+0xa0>)
 8000220:	f000 f860 	bl	80002e4 <APARSER_voidParseRecord>
				/*Reset Buffer Counter*/
				u8RecCounter = APP_VALUE_0 ;
 8000224:	4b0e      	ldr	r3, [pc, #56]	; (8000260 <ABL_VoidRun+0x9c>)
 8000226:	2200      	movs	r2, #0
 8000228:	701a      	strb	r2, [r3, #0]
 800022a:	e006      	b.n	800023a <ABL_VoidRun+0x76>
			}
			else{u8RecCounter++ ; }
 800022c:	4b0c      	ldr	r3, [pc, #48]	; (8000260 <ABL_VoidRun+0x9c>)
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	b2db      	uxtb	r3, r3
 8000232:	3301      	adds	r3, #1
 8000234:	b2da      	uxtb	r2, r3
 8000236:	4b0a      	ldr	r3, [pc, #40]	; (8000260 <ABL_VoidRun+0x9c>)
 8000238:	701a      	strb	r2, [r3, #0]

			/*End Of File*/
			if(ReceiveBuffer[APP_VALUE_8] == '1')
 800023a:	4b0a      	ldr	r3, [pc, #40]	; (8000264 <ABL_VoidRun+0xa0>)
 800023c:	7a1b      	ldrb	r3, [r3, #8]
 800023e:	2b31      	cmp	r3, #49	; 0x31
 8000240:	d103      	bne.n	800024a <ABL_VoidRun+0x86>
			{
				/*Wait 1 second then jump to Application*/
				MSTK_voidSetIntervalSingle(MSTK_ONE_SECOND,ABL_VoidJumptoApp) ;
 8000242:	490a      	ldr	r1, [pc, #40]	; (800026c <ABL_VoidRun+0xa8>)
 8000244:	480a      	ldr	r0, [pc, #40]	; (8000270 <ABL_VoidRun+0xac>)
 8000246:	f000 fbed 	bl	8000a24 <MSTK_voidSetIntervalSingle>
	while(TimeOutFlag == APP_VALUE_0)
 800024a:	4b0a      	ldr	r3, [pc, #40]	; (8000274 <ABL_VoidRun+0xb0>)
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	b2db      	uxtb	r3, r3
 8000250:	2b00      	cmp	r3, #0
 8000252:	d0bd      	beq.n	80001d0 <ABL_VoidRun+0xc>

		}


	}
}
 8000254:	bf00      	nop
 8000256:	bf00      	nop
 8000258:	3708      	adds	r7, #8
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	2000008c 	.word	0x2000008c
 8000264:	20000028 	.word	0x20000028
 8000268:	20000000 	.word	0x20000000
 800026c:	08000279 	.word	0x08000279
 8000270:	000f4240 	.word	0x000f4240
 8000274:	20000024 	.word	0x20000024

08000278 <ABL_VoidJumptoApp>:

void ABL_VoidJumptoApp(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	/*setting the time out flag to 1 to avoid entering the super loop*/
	TimeOutFlag = 1 ;
 800027c:	4b07      	ldr	r3, [pc, #28]	; (800029c <ABL_VoidJumptoApp+0x24>)
 800027e:	2201      	movs	r2, #1
 8000280:	701a      	strb	r2, [r3, #0]
	/*Move Vector Table*/
#define SCB_VTOR       *((volatile u32*)0xE000ED08)

	SCB_VTOR = 0x08001000 ; //Starting of Sector 1 [Application]
 8000282:	4b07      	ldr	r3, [pc, #28]	; (80002a0 <ABL_VoidJumptoApp+0x28>)
 8000284:	4a07      	ldr	r2, [pc, #28]	; (80002a4 <ABL_VoidJumptoApp+0x2c>)
 8000286:	601a      	str	r2, [r3, #0]

	/*Set Address to call with Reset Handeler_ISR [startup code of Application]*/
	Add_To_Call = *(APP_Call*) 0x08001004 ;
 8000288:	4b07      	ldr	r3, [pc, #28]	; (80002a8 <ABL_VoidJumptoApp+0x30>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a07      	ldr	r2, [pc, #28]	; (80002ac <ABL_VoidJumptoApp+0x34>)
 800028e:	6013      	str	r3, [r2, #0]

	Add_To_Call() ; //jump Reset handler [startup code]
 8000290:	4b06      	ldr	r3, [pc, #24]	; (80002ac <ABL_VoidJumptoApp+0x34>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4798      	blx	r3
}
 8000296:	bf00      	nop
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	20000024 	.word	0x20000024
 80002a0:	e000ed08 	.word	0xe000ed08
 80002a4:	08001000 	.word	0x08001000
 80002a8:	08001004 	.word	0x08001004
 80002ac:	20000090 	.word	0x20000090

080002b0 <APARSER_u8AsciiToHex>:
u32 GLB_u32Address  = 0x08000000;

u16 GLB_u16Data[100] ;

u8 APARSER_u8AsciiToHex(u8 Copy_u8Asci)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	71fb      	strb	r3, [r7, #7]

	u8 LOC_u8Result = 0 ;
 80002ba:	2300      	movs	r3, #0
 80002bc:	73fb      	strb	r3, [r7, #15]

	if((Copy_u8Asci >=48) && (Copy_u8Asci <=57) )
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	2b2f      	cmp	r3, #47	; 0x2f
 80002c2:	d906      	bls.n	80002d2 <APARSER_u8AsciiToHex+0x22>
 80002c4:	79fb      	ldrb	r3, [r7, #7]
 80002c6:	2b39      	cmp	r3, #57	; 0x39
 80002c8:	d803      	bhi.n	80002d2 <APARSER_u8AsciiToHex+0x22>
	{
		LOC_u8Result = Copy_u8Asci - 48 ;
 80002ca:	79fb      	ldrb	r3, [r7, #7]
 80002cc:	3b30      	subs	r3, #48	; 0x30
 80002ce:	73fb      	strb	r3, [r7, #15]
 80002d0:	e002      	b.n	80002d8 <APARSER_u8AsciiToHex+0x28>
	}
	else
	{
		LOC_u8Result = Copy_u8Asci  - 55 ;
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	3b37      	subs	r3, #55	; 0x37
 80002d6:	73fb      	strb	r3, [r7, #15]
	}

	return LOC_u8Result ;
 80002d8:	7bfb      	ldrb	r3, [r7, #15]

}
 80002da:	4618      	mov	r0, r3
 80002dc:	3714      	adds	r7, #20
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr

080002e4 <APARSER_voidParseRecord>:



void APARSER_voidParseRecord(u8 * Copy_u8BufRecord)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
	switch(Copy_u8BufRecord[8])
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	3308      	adds	r3, #8
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	2b34      	cmp	r3, #52	; 0x34
 80002f4:	d009      	beq.n	800030a <APARSER_voidParseRecord+0x26>
 80002f6:	2b34      	cmp	r3, #52	; 0x34
 80002f8:	dc08      	bgt.n	800030c <APARSER_voidParseRecord+0x28>
 80002fa:	2b30      	cmp	r3, #48	; 0x30
 80002fc:	d001      	beq.n	8000302 <APARSER_voidParseRecord+0x1e>
 80002fe:	2b31      	cmp	r3, #49	; 0x31
	{
	case '0' : APARSE_voidParseData(Copy_u8BufRecord);  break ;
	case '4' : /*Set High Address part*/                break ;
	case '1' : /*End Of File*/                          break ;
 8000300:	e004      	b.n	800030c <APARSER_voidParseRecord+0x28>
	case '0' : APARSE_voidParseData(Copy_u8BufRecord);  break ;
 8000302:	6878      	ldr	r0, [r7, #4]
 8000304:	f000 f806 	bl	8000314 <APARSE_voidParseData>
 8000308:	e000      	b.n	800030c <APARSER_voidParseRecord+0x28>
	case '4' : /*Set High Address part*/                break ;
 800030a:	bf00      	nop
	}

}
 800030c:	bf00      	nop
 800030e:	3708      	adds	r7, #8
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}

08000314 <APARSE_voidParseData>:


void APARSE_voidParseData(u8* Copy_u8BufData)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
	u8 LOC_u8Digit1 ;
	u8 LOC_u8Digit2 ;
	u8 LOC_u8Digit3 ;

	/*Iterator For Data  Loop*/
	u8 LOC_u8Result = 0 ;
 800031c:	2300      	movs	r3, #0
 800031e:	73fb      	strb	r3, [r7, #15]

	/******************************************************************************************************/
	/*############################################### Parsing ############################################*/
	/******************************************************************************************************/
	/*Receive CC*/
	LOC_u8CCDigitHigh = APARSER_u8AsciiToHex(Copy_u8BufData[1]) ;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	3301      	adds	r3, #1
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	4618      	mov	r0, r3
 8000328:	f7ff ffc2 	bl	80002b0 <APARSER_u8AsciiToHex>
 800032c:	4603      	mov	r3, r0
 800032e:	73bb      	strb	r3, [r7, #14]
	LOC_u8CCDigitLow  = APARSER_u8AsciiToHex(Copy_u8BufData[2]);
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	3302      	adds	r3, #2
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	4618      	mov	r0, r3
 8000338:	f7ff ffba 	bl	80002b0 <APARSER_u8AsciiToHex>
 800033c:	4603      	mov	r3, r0
 800033e:	737b      	strb	r3, [r7, #13]
	LOC_u8CharacterCount =  LOC_u8CCDigitHigh<<4 | LOC_u8CCDigitLow ;
 8000340:	7bbb      	ldrb	r3, [r7, #14]
 8000342:	011b      	lsls	r3, r3, #4
 8000344:	b25a      	sxtb	r2, r3
 8000346:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800034a:	4313      	orrs	r3, r2
 800034c:	b25b      	sxtb	r3, r3
 800034e:	733b      	strb	r3, [r7, #12]
	/*Receive Low part Address Address*/
	LOC_u8Digit0 = APARSER_u8AsciiToHex(Copy_u8BufData[3]);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	3303      	adds	r3, #3
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	4618      	mov	r0, r3
 8000358:	f7ff ffaa 	bl	80002b0 <APARSER_u8AsciiToHex>
 800035c:	4603      	mov	r3, r0
 800035e:	72fb      	strb	r3, [r7, #11]
	LOC_u8Digit1 = APARSER_u8AsciiToHex(Copy_u8BufData[4]);
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	3304      	adds	r3, #4
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	4618      	mov	r0, r3
 8000368:	f7ff ffa2 	bl	80002b0 <APARSER_u8AsciiToHex>
 800036c:	4603      	mov	r3, r0
 800036e:	72bb      	strb	r3, [r7, #10]
	LOC_u8Digit2 = APARSER_u8AsciiToHex(Copy_u8BufData[5]);
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	3305      	adds	r3, #5
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	4618      	mov	r0, r3
 8000378:	f7ff ff9a 	bl	80002b0 <APARSER_u8AsciiToHex>
 800037c:	4603      	mov	r3, r0
 800037e:	727b      	strb	r3, [r7, #9]
	LOC_u8Digit3 = APARSER_u8AsciiToHex(Copy_u8BufData[6]);
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	3306      	adds	r3, #6
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	4618      	mov	r0, r3
 8000388:	f7ff ff92 	bl	80002b0 <APARSER_u8AsciiToHex>
 800038c:	4603      	mov	r3, r0
 800038e:	723b      	strb	r3, [r7, #8]

	GLB_u32Address &= 0xFFFF0000 ;  ///4000
 8000390:	4b38      	ldr	r3, [pc, #224]	; (8000474 <APARSE_voidParseData+0x160>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	0c1b      	lsrs	r3, r3, #16
 8000396:	041b      	lsls	r3, r3, #16
 8000398:	4a36      	ldr	r2, [pc, #216]	; (8000474 <APARSE_voidParseData+0x160>)
 800039a:	6013      	str	r3, [r2, #0]

	GLB_u32Address |= (LOC_u8Digit0<<12) | (LOC_u8Digit1<<8) | (LOC_u8Digit2<<4) |(LOC_u8Digit3)  ;
 800039c:	7afb      	ldrb	r3, [r7, #11]
 800039e:	031a      	lsls	r2, r3, #12
 80003a0:	7abb      	ldrb	r3, [r7, #10]
 80003a2:	021b      	lsls	r3, r3, #8
 80003a4:	431a      	orrs	r2, r3
 80003a6:	7a7b      	ldrb	r3, [r7, #9]
 80003a8:	011b      	lsls	r3, r3, #4
 80003aa:	431a      	orrs	r2, r3
 80003ac:	7a3b      	ldrb	r3, [r7, #8]
 80003ae:	4313      	orrs	r3, r2
 80003b0:	461a      	mov	r2, r3
 80003b2:	4b30      	ldr	r3, [pc, #192]	; (8000474 <APARSE_voidParseData+0x160>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4313      	orrs	r3, r2
 80003b8:	4a2e      	ldr	r2, [pc, #184]	; (8000474 <APARSE_voidParseData+0x160>)
 80003ba:	6013      	str	r3, [r2, #0]


	for(LOC_u8Result = 0 ; LOC_u8Result < (LOC_u8CharacterCount / 2) ; LOC_u8Result++  )
 80003bc:	2300      	movs	r3, #0
 80003be:	73fb      	strb	r3, [r7, #15]
 80003c0:	e044      	b.n	800044c <APARSE_voidParseData+0x138>
	{
		/*Receive  Half Word Data [4 Digits]*/
		LOC_u8Digit0 = APARSER_u8AsciiToHex(Copy_u8BufData[(4 * LOC_u8Result) + 9]);
 80003c2:	7bfb      	ldrb	r3, [r7, #15]
 80003c4:	009b      	lsls	r3, r3, #2
 80003c6:	3309      	adds	r3, #9
 80003c8:	687a      	ldr	r2, [r7, #4]
 80003ca:	4413      	add	r3, r2
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	4618      	mov	r0, r3
 80003d0:	f7ff ff6e 	bl	80002b0 <APARSER_u8AsciiToHex>
 80003d4:	4603      	mov	r3, r0
 80003d6:	72fb      	strb	r3, [r7, #11]
		LOC_u8Digit1 = APARSER_u8AsciiToHex(Copy_u8BufData[(4 * LOC_u8Result) + 10]);
 80003d8:	7bfb      	ldrb	r3, [r7, #15]
 80003da:	009b      	lsls	r3, r3, #2
 80003dc:	330a      	adds	r3, #10
 80003de:	687a      	ldr	r2, [r7, #4]
 80003e0:	4413      	add	r3, r2
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	4618      	mov	r0, r3
 80003e6:	f7ff ff63 	bl	80002b0 <APARSER_u8AsciiToHex>
 80003ea:	4603      	mov	r3, r0
 80003ec:	72bb      	strb	r3, [r7, #10]
		LOC_u8Digit2 = APARSER_u8AsciiToHex(Copy_u8BufData[(4 * LOC_u8Result) + 11]);
 80003ee:	7bfb      	ldrb	r3, [r7, #15]
 80003f0:	009b      	lsls	r3, r3, #2
 80003f2:	330b      	adds	r3, #11
 80003f4:	687a      	ldr	r2, [r7, #4]
 80003f6:	4413      	add	r3, r2
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	4618      	mov	r0, r3
 80003fc:	f7ff ff58 	bl	80002b0 <APARSER_u8AsciiToHex>
 8000400:	4603      	mov	r3, r0
 8000402:	727b      	strb	r3, [r7, #9]
		LOC_u8Digit3 = APARSER_u8AsciiToHex(Copy_u8BufData[(4 * LOC_u8Result) + 12]);
 8000404:	7bfb      	ldrb	r3, [r7, #15]
 8000406:	009b      	lsls	r3, r3, #2
 8000408:	330c      	adds	r3, #12
 800040a:	687a      	ldr	r2, [r7, #4]
 800040c:	4413      	add	r3, r2
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	4618      	mov	r0, r3
 8000412:	f7ff ff4d 	bl	80002b0 <APARSER_u8AsciiToHex>
 8000416:	4603      	mov	r3, r0
 8000418:	723b      	strb	r3, [r7, #8]
		/*because little Endian*/
		GLB_u16Data[LOC_u8Result] = (LOC_u8Digit2<<12) | (LOC_u8Digit3<<8) | (LOC_u8Digit0<<4) |(LOC_u8Digit1)  ;
 800041a:	7a7b      	ldrb	r3, [r7, #9]
 800041c:	031b      	lsls	r3, r3, #12
 800041e:	b21a      	sxth	r2, r3
 8000420:	7a3b      	ldrb	r3, [r7, #8]
 8000422:	021b      	lsls	r3, r3, #8
 8000424:	b21b      	sxth	r3, r3
 8000426:	4313      	orrs	r3, r2
 8000428:	b21a      	sxth	r2, r3
 800042a:	7afb      	ldrb	r3, [r7, #11]
 800042c:	011b      	lsls	r3, r3, #4
 800042e:	b21b      	sxth	r3, r3
 8000430:	4313      	orrs	r3, r2
 8000432:	b21a      	sxth	r2, r3
 8000434:	7abb      	ldrb	r3, [r7, #10]
 8000436:	b21b      	sxth	r3, r3
 8000438:	4313      	orrs	r3, r2
 800043a:	b21a      	sxth	r2, r3
 800043c:	7bfb      	ldrb	r3, [r7, #15]
 800043e:	b291      	uxth	r1, r2
 8000440:	4a0d      	ldr	r2, [pc, #52]	; (8000478 <APARSE_voidParseData+0x164>)
 8000442:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(LOC_u8Result = 0 ; LOC_u8Result < (LOC_u8CharacterCount / 2) ; LOC_u8Result++  )
 8000446:	7bfb      	ldrb	r3, [r7, #15]
 8000448:	3301      	adds	r3, #1
 800044a:	73fb      	strb	r3, [r7, #15]
 800044c:	7b3b      	ldrb	r3, [r7, #12]
 800044e:	085b      	lsrs	r3, r3, #1
 8000450:	b2db      	uxtb	r3, r3
 8000452:	7bfa      	ldrb	r2, [r7, #15]
 8000454:	429a      	cmp	r2, r3
 8000456:	d3b4      	bcc.n	80003c2 <APARSE_voidParseData+0xae>
	}
	MFDI_voidFlashWrite(GLB_u32Address,GLB_u16Data,(LOC_u8CharacterCount / 2));
 8000458:	4b06      	ldr	r3, [pc, #24]	; (8000474 <APARSE_voidParseData+0x160>)
 800045a:	6818      	ldr	r0, [r3, #0]
 800045c:	7b3b      	ldrb	r3, [r7, #12]
 800045e:	085b      	lsrs	r3, r3, #1
 8000460:	b2db      	uxtb	r3, r3
 8000462:	461a      	mov	r2, r3
 8000464:	4904      	ldr	r1, [pc, #16]	; (8000478 <APARSE_voidParseData+0x164>)
 8000466:	f000 f873 	bl	8000550 <MFDI_voidFlashWrite>
}
 800046a:	bf00      	nop
 800046c:	3710      	adds	r7, #16
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	20000004 	.word	0x20000004
 8000478:	20000094 	.word	0x20000094

0800047c <MFDI_voidSectorErase>:

/*#####################################################################################################*/
/*#####################################################################################################*/

void MFDI_voidSectorErase(u8 Copy_u8SectorNumber)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	4603      	mov	r3, r0
 8000484:	71fb      	strb	r3, [r7, #7]
	/*wait if Busy == 1 in SR*/
	while(GET_BIT(MFDI->SR , 16) ==1) ;
 8000486:	bf00      	nop
 8000488:	4b23      	ldr	r3, [pc, #140]	; (8000518 <MFDI_voidSectorErase+0x9c>)
 800048a:	68db      	ldr	r3, [r3, #12]
 800048c:	0c1b      	lsrs	r3, r3, #16
 800048e:	f003 0301 	and.w	r3, r3, #1
 8000492:	2b01      	cmp	r3, #1
 8000494:	d0f8      	beq.n	8000488 <MFDI_voidSectorErase+0xc>

	/*Unlock flash if lock bit = 1*/
	if(GET_BIT(MFDI->CR , 31) == 1)
 8000496:	4b20      	ldr	r3, [pc, #128]	; (8000518 <MFDI_voidSectorErase+0x9c>)
 8000498:	691b      	ldr	r3, [r3, #16]
 800049a:	0fdb      	lsrs	r3, r3, #31
 800049c:	f003 0301 	and.w	r3, r3, #1
 80004a0:	2b01      	cmp	r3, #1
 80004a2:	d105      	bne.n	80004b0 <MFDI_voidSectorErase+0x34>
	{
		MFDI->KEYR = MFDI_KEY1 ;
 80004a4:	4b1c      	ldr	r3, [pc, #112]	; (8000518 <MFDI_voidSectorErase+0x9c>)
 80004a6:	4a1d      	ldr	r2, [pc, #116]	; (800051c <MFDI_voidSectorErase+0xa0>)
 80004a8:	605a      	str	r2, [r3, #4]
		MFDI->KEYR = MFDI_KEY2 ;
 80004aa:	4b1b      	ldr	r3, [pc, #108]	; (8000518 <MFDI_voidSectorErase+0x9c>)
 80004ac:	4a1c      	ldr	r2, [pc, #112]	; (8000520 <MFDI_voidSectorErase+0xa4>)
 80004ae:	605a      	str	r2, [r3, #4]
	}

	/*Set Number Of Sectors  in CR */
	MFDI->CR &= 0XFFFFFF87 ;     /*clear bits from bit3 to bit6*/
 80004b0:	4b19      	ldr	r3, [pc, #100]	; (8000518 <MFDI_voidSectorErase+0x9c>)
 80004b2:	691b      	ldr	r3, [r3, #16]
 80004b4:	4a18      	ldr	r2, [pc, #96]	; (8000518 <MFDI_voidSectorErase+0x9c>)
 80004b6:	f023 0378 	bic.w	r3, r3, #120	; 0x78
 80004ba:	6113      	str	r3, [r2, #16]
	MFDI->CR |= Copy_u8SectorNumber<<3  ;
 80004bc:	4b16      	ldr	r3, [pc, #88]	; (8000518 <MFDI_voidSectorErase+0x9c>)
 80004be:	691b      	ldr	r3, [r3, #16]
 80004c0:	79fa      	ldrb	r2, [r7, #7]
 80004c2:	00d2      	lsls	r2, r2, #3
 80004c4:	4611      	mov	r1, r2
 80004c6:	4a14      	ldr	r2, [pc, #80]	; (8000518 <MFDI_voidSectorErase+0x9c>)
 80004c8:	430b      	orrs	r3, r1
 80004ca:	6113      	str	r3, [r2, #16]

	/*Set SER bit --> to Activate Sector Erase*/
	SET_BIT(MFDI->CR,1) ;
 80004cc:	4b12      	ldr	r3, [pc, #72]	; (8000518 <MFDI_voidSectorErase+0x9c>)
 80004ce:	691b      	ldr	r3, [r3, #16]
 80004d0:	4a11      	ldr	r2, [pc, #68]	; (8000518 <MFDI_voidSectorErase+0x9c>)
 80004d2:	f043 0302 	orr.w	r3, r3, #2
 80004d6:	6113      	str	r3, [r2, #16]

	/*Set Starting Bit */
	SET_BIT(MFDI->CR,16) ;
 80004d8:	4b0f      	ldr	r3, [pc, #60]	; (8000518 <MFDI_voidSectorErase+0x9c>)
 80004da:	691b      	ldr	r3, [r3, #16]
 80004dc:	4a0e      	ldr	r2, [pc, #56]	; (8000518 <MFDI_voidSectorErase+0x9c>)
 80004de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004e2:	6113      	str	r3, [r2, #16]

	/*wait if Busy == 1 in SR*/
	while(GET_BIT(MFDI->SR , 16) ==1) ;
 80004e4:	bf00      	nop
 80004e6:	4b0c      	ldr	r3, [pc, #48]	; (8000518 <MFDI_voidSectorErase+0x9c>)
 80004e8:	68db      	ldr	r3, [r3, #12]
 80004ea:	0c1b      	lsrs	r3, r3, #16
 80004ec:	f003 0301 	and.w	r3, r3, #1
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d0f8      	beq.n	80004e6 <MFDI_voidSectorErase+0x6a>

	/*Set EOP Bit in SR --> to Clear the Flag OF EOF */
	SET_BIT(MFDI->SR,0) ;
 80004f4:	4b08      	ldr	r3, [pc, #32]	; (8000518 <MFDI_voidSectorErase+0x9c>)
 80004f6:	68db      	ldr	r3, [r3, #12]
 80004f8:	4a07      	ldr	r2, [pc, #28]	; (8000518 <MFDI_voidSectorErase+0x9c>)
 80004fa:	f043 0301 	orr.w	r3, r3, #1
 80004fe:	60d3      	str	r3, [r2, #12]

	/*Clear SER bit --> to Deactivate Sector Erase*/
	CLR_BIT(MFDI->CR,1) ;
 8000500:	4b05      	ldr	r3, [pc, #20]	; (8000518 <MFDI_voidSectorErase+0x9c>)
 8000502:	691b      	ldr	r3, [r3, #16]
 8000504:	4a04      	ldr	r2, [pc, #16]	; (8000518 <MFDI_voidSectorErase+0x9c>)
 8000506:	f023 0302 	bic.w	r3, r3, #2
 800050a:	6113      	str	r3, [r2, #16]
}
 800050c:	bf00      	nop
 800050e:	370c      	adds	r7, #12
 8000510:	46bd      	mov	sp, r7
 8000512:	bc80      	pop	{r7}
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	40023c00 	.word	0x40023c00
 800051c:	45670123 	.word	0x45670123
 8000520:	cdef89ab 	.word	0xcdef89ab

08000524 <MFDI_voidEraseAppArea>:


void MFDI_voidEraseAppArea(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
	u8 LOC_u8Iterator ;
	for( LOC_u8Iterator = 1 ; LOC_u8Iterator < 6 ; LOC_u8Iterator++)
 800052a:	2301      	movs	r3, #1
 800052c:	71fb      	strb	r3, [r7, #7]
 800052e:	e006      	b.n	800053e <MFDI_voidEraseAppArea+0x1a>
	{
		MFDI_voidSectorErase(LOC_u8Iterator) ;
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	4618      	mov	r0, r3
 8000534:	f7ff ffa2 	bl	800047c <MFDI_voidSectorErase>
	for( LOC_u8Iterator = 1 ; LOC_u8Iterator < 6 ; LOC_u8Iterator++)
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	3301      	adds	r3, #1
 800053c:	71fb      	strb	r3, [r7, #7]
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	2b05      	cmp	r3, #5
 8000542:	d9f5      	bls.n	8000530 <MFDI_voidEraseAppArea+0xc>
	}
}
 8000544:	bf00      	nop
 8000546:	bf00      	nop
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
	...

08000550 <MFDI_voidFlashWrite>:

void MFDI_voidFlashWrite(u32 Copy_u32Address ,u16* Copy_PtrData, u8 Copy_u8DataLength)
{
 8000550:	b480      	push	{r7}
 8000552:	b087      	sub	sp, #28
 8000554:	af00      	add	r7, sp, #0
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	4613      	mov	r3, r2
 800055c:	71fb      	strb	r3, [r7, #7]
	u8 LOC_u8Iterator ;

	/*wait if Busy == 1 in SR*/
	while(GET_BIT(MFDI->SR , 16) ==1) ;
 800055e:	bf00      	nop
 8000560:	4b29      	ldr	r3, [pc, #164]	; (8000608 <MFDI_voidFlashWrite+0xb8>)
 8000562:	68db      	ldr	r3, [r3, #12]
 8000564:	0c1b      	lsrs	r3, r3, #16
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	2b01      	cmp	r3, #1
 800056c:	d0f8      	beq.n	8000560 <MFDI_voidFlashWrite+0x10>

	/*Unlock flash if lock bit = 1*/
	if(GET_BIT(MFDI->CR , 31) == 1)
 800056e:	4b26      	ldr	r3, [pc, #152]	; (8000608 <MFDI_voidFlashWrite+0xb8>)
 8000570:	691b      	ldr	r3, [r3, #16]
 8000572:	0fdb      	lsrs	r3, r3, #31
 8000574:	f003 0301 	and.w	r3, r3, #1
 8000578:	2b01      	cmp	r3, #1
 800057a:	d105      	bne.n	8000588 <MFDI_voidFlashWrite+0x38>
	{
		MFDI->KEYR = MFDI_KEY1 ;
 800057c:	4b22      	ldr	r3, [pc, #136]	; (8000608 <MFDI_voidFlashWrite+0xb8>)
 800057e:	4a23      	ldr	r2, [pc, #140]	; (800060c <MFDI_voidFlashWrite+0xbc>)
 8000580:	605a      	str	r2, [r3, #4]
		MFDI->KEYR = MFDI_KEY2 ;
 8000582:	4b21      	ldr	r3, [pc, #132]	; (8000608 <MFDI_voidFlashWrite+0xb8>)
 8000584:	4a22      	ldr	r2, [pc, #136]	; (8000610 <MFDI_voidFlashWrite+0xc0>)
 8000586:	605a      	str	r2, [r3, #4]
	}

	/*Select PSize in CR --> Half Word*/
	MFDI->CR &= 0XFFFFFCFF ;     /*clear bits from bit8 to bit9  -->[1100]*/
 8000588:	4b1f      	ldr	r3, [pc, #124]	; (8000608 <MFDI_voidFlashWrite+0xb8>)
 800058a:	691b      	ldr	r3, [r3, #16]
 800058c:	4a1e      	ldr	r2, [pc, #120]	; (8000608 <MFDI_voidFlashWrite+0xb8>)
 800058e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000592:	6113      	str	r3, [r2, #16]
	MFDI->CR |= WRITE_HALF_WORD<<8  ;
 8000594:	4b1c      	ldr	r3, [pc, #112]	; (8000608 <MFDI_voidFlashWrite+0xb8>)
 8000596:	691b      	ldr	r3, [r3, #16]
 8000598:	4a1b      	ldr	r2, [pc, #108]	; (8000608 <MFDI_voidFlashWrite+0xb8>)
 800059a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800059e:	6113      	str	r3, [r2, #16]

    for(LOC_u8Iterator = 0 ; LOC_u8Iterator < Copy_u8DataLength ; LOC_u8Iterator++ )
 80005a0:	2300      	movs	r3, #0
 80005a2:	75fb      	strb	r3, [r7, #23]
 80005a4:	e026      	b.n	80005f4 <MFDI_voidFlashWrite+0xa4>
    {
	/*Set PG Bit in CR --> to Activate Programming Flash*/
	SET_BIT(MFDI->CR,0) ;
 80005a6:	4b18      	ldr	r3, [pc, #96]	; (8000608 <MFDI_voidFlashWrite+0xb8>)
 80005a8:	691b      	ldr	r3, [r3, #16]
 80005aa:	4a17      	ldr	r2, [pc, #92]	; (8000608 <MFDI_voidFlashWrite+0xb8>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	6113      	str	r3, [r2, #16]

	/*Set Address to write to it
	 *
	 *((volatie u16 * )address) = Data[index] */

	*((volatile u16*)Copy_u32Address) = Copy_PtrData[LOC_u8Iterator]  ;
 80005b2:	7dfb      	ldrb	r3, [r7, #23]
 80005b4:	005b      	lsls	r3, r3, #1
 80005b6:	68ba      	ldr	r2, [r7, #8]
 80005b8:	441a      	add	r2, r3
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	8812      	ldrh	r2, [r2, #0]
 80005be:	801a      	strh	r2, [r3, #0]
	Copy_u32Address +=2 ;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	3302      	adds	r3, #2
 80005c4:	60fb      	str	r3, [r7, #12]

	/*wait if Busy == 1 in SR*/
	while(GET_BIT(MFDI->SR , 16) ==1) ;
 80005c6:	bf00      	nop
 80005c8:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <MFDI_voidFlashWrite+0xb8>)
 80005ca:	68db      	ldr	r3, [r3, #12]
 80005cc:	0c1b      	lsrs	r3, r3, #16
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d0f8      	beq.n	80005c8 <MFDI_voidFlashWrite+0x78>
	/*Set EOP Bit in SR --> to Clear the Flag OF EOF */
	SET_BIT(MFDI->SR,0) ;
 80005d6:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <MFDI_voidFlashWrite+0xb8>)
 80005d8:	68db      	ldr	r3, [r3, #12]
 80005da:	4a0b      	ldr	r2, [pc, #44]	; (8000608 <MFDI_voidFlashWrite+0xb8>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	60d3      	str	r3, [r2, #12]
	/*Clear PG bit --> to Deactivate Programming*/
	CLR_BIT(MFDI->CR,0) ;
 80005e2:	4b09      	ldr	r3, [pc, #36]	; (8000608 <MFDI_voidFlashWrite+0xb8>)
 80005e4:	691b      	ldr	r3, [r3, #16]
 80005e6:	4a08      	ldr	r2, [pc, #32]	; (8000608 <MFDI_voidFlashWrite+0xb8>)
 80005e8:	f023 0301 	bic.w	r3, r3, #1
 80005ec:	6113      	str	r3, [r2, #16]
    for(LOC_u8Iterator = 0 ; LOC_u8Iterator < Copy_u8DataLength ; LOC_u8Iterator++ )
 80005ee:	7dfb      	ldrb	r3, [r7, #23]
 80005f0:	3301      	adds	r3, #1
 80005f2:	75fb      	strb	r3, [r7, #23]
 80005f4:	7dfa      	ldrb	r2, [r7, #23]
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d3d4      	bcc.n	80005a6 <MFDI_voidFlashWrite+0x56>
    }
}
 80005fc:	bf00      	nop
 80005fe:	bf00      	nop
 8000600:	371c      	adds	r7, #28
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr
 8000608:	40023c00 	.word	0x40023c00
 800060c:	45670123 	.word	0x45670123
 8000610:	cdef89ab 	.word	0xcdef89ab

08000614 <MGPIO_voidSetPinMode>:
/* 2- Function Input       -> Copy_u8PortName ,   Copy_u8PinNum ,   Copy_u8Mod                         */                   
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/

void MGPIO_voidSetPinMode(u8 Copy_u8PortName ,u8 Copy_u8PinNum ,u8 Copy_u8Mode  )
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	71fb      	strb	r3, [r7, #7]
 800061e:	460b      	mov	r3, r1
 8000620:	71bb      	strb	r3, [r7, #6]
 8000622:	4613      	mov	r3, r2
 8000624:	717b      	strb	r3, [r7, #5]
	switch(Copy_u8PortName)
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	2b05      	cmp	r3, #5
 800062a:	d857      	bhi.n	80006dc <MGPIO_voidSetPinMode+0xc8>
 800062c:	a201      	add	r2, pc, #4	; (adr r2, 8000634 <MGPIO_voidSetPinMode+0x20>)
 800062e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000632:	bf00      	nop
 8000634:	0800064d 	.word	0x0800064d
 8000638:	08000665 	.word	0x08000665
 800063c:	0800067d 	.word	0x0800067d
 8000640:	08000695 	.word	0x08000695
 8000644:	080006ad 	.word	0x080006ad
 8000648:	080006c5 	.word	0x080006c5
	{
	case MGPIOA_PORT : MGPIOA->MODER |= (u32)(Copy_u8Mode << (2U * Copy_u8PinNum ))  ; break ;
 800064c:	4b26      	ldr	r3, [pc, #152]	; (80006e8 <MGPIO_voidSetPinMode+0xd4>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	7979      	ldrb	r1, [r7, #5]
 8000652:	79ba      	ldrb	r2, [r7, #6]
 8000654:	0052      	lsls	r2, r2, #1
 8000656:	fa01 f202 	lsl.w	r2, r1, r2
 800065a:	4611      	mov	r1, r2
 800065c:	4a22      	ldr	r2, [pc, #136]	; (80006e8 <MGPIO_voidSetPinMode+0xd4>)
 800065e:	430b      	orrs	r3, r1
 8000660:	6013      	str	r3, [r2, #0]
 8000662:	e03c      	b.n	80006de <MGPIO_voidSetPinMode+0xca>
	case MGPIOB_PORT : MGPIOB->MODER |= (u32)(Copy_u8Mode << (2U * Copy_u8PinNum ))  ; break ;
 8000664:	4b21      	ldr	r3, [pc, #132]	; (80006ec <MGPIO_voidSetPinMode+0xd8>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	7979      	ldrb	r1, [r7, #5]
 800066a:	79ba      	ldrb	r2, [r7, #6]
 800066c:	0052      	lsls	r2, r2, #1
 800066e:	fa01 f202 	lsl.w	r2, r1, r2
 8000672:	4611      	mov	r1, r2
 8000674:	4a1d      	ldr	r2, [pc, #116]	; (80006ec <MGPIO_voidSetPinMode+0xd8>)
 8000676:	430b      	orrs	r3, r1
 8000678:	6013      	str	r3, [r2, #0]
 800067a:	e030      	b.n	80006de <MGPIO_voidSetPinMode+0xca>
	case MGPIOC_PORT : MGPIOC->MODER |= (u32)(Copy_u8Mode << (2U * Copy_u8PinNum ))  ; break ;
 800067c:	4b1c      	ldr	r3, [pc, #112]	; (80006f0 <MGPIO_voidSetPinMode+0xdc>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	7979      	ldrb	r1, [r7, #5]
 8000682:	79ba      	ldrb	r2, [r7, #6]
 8000684:	0052      	lsls	r2, r2, #1
 8000686:	fa01 f202 	lsl.w	r2, r1, r2
 800068a:	4611      	mov	r1, r2
 800068c:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <MGPIO_voidSetPinMode+0xdc>)
 800068e:	430b      	orrs	r3, r1
 8000690:	6013      	str	r3, [r2, #0]
 8000692:	e024      	b.n	80006de <MGPIO_voidSetPinMode+0xca>
	case MGPIOD_PORT : MGPIOD->MODER |= (u32)(Copy_u8Mode << (2U * Copy_u8PinNum ))  ; break ;
 8000694:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <MGPIO_voidSetPinMode+0xe0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	7979      	ldrb	r1, [r7, #5]
 800069a:	79ba      	ldrb	r2, [r7, #6]
 800069c:	0052      	lsls	r2, r2, #1
 800069e:	fa01 f202 	lsl.w	r2, r1, r2
 80006a2:	4611      	mov	r1, r2
 80006a4:	4a13      	ldr	r2, [pc, #76]	; (80006f4 <MGPIO_voidSetPinMode+0xe0>)
 80006a6:	430b      	orrs	r3, r1
 80006a8:	6013      	str	r3, [r2, #0]
 80006aa:	e018      	b.n	80006de <MGPIO_voidSetPinMode+0xca>
	case MGPIOE_PORT : MGPIOE->MODER |= (u32)(Copy_u8Mode << (2U * Copy_u8PinNum ))  ; break ;
 80006ac:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <MGPIO_voidSetPinMode+0xe4>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	7979      	ldrb	r1, [r7, #5]
 80006b2:	79ba      	ldrb	r2, [r7, #6]
 80006b4:	0052      	lsls	r2, r2, #1
 80006b6:	fa01 f202 	lsl.w	r2, r1, r2
 80006ba:	4611      	mov	r1, r2
 80006bc:	4a0e      	ldr	r2, [pc, #56]	; (80006f8 <MGPIO_voidSetPinMode+0xe4>)
 80006be:	430b      	orrs	r3, r1
 80006c0:	6013      	str	r3, [r2, #0]
 80006c2:	e00c      	b.n	80006de <MGPIO_voidSetPinMode+0xca>
	case MGPIOH_PORT : MGPIOH->MODER |= (u32)(Copy_u8Mode << (2U * Copy_u8PinNum ))  ; break ;
 80006c4:	4b0d      	ldr	r3, [pc, #52]	; (80006fc <MGPIO_voidSetPinMode+0xe8>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	7979      	ldrb	r1, [r7, #5]
 80006ca:	79ba      	ldrb	r2, [r7, #6]
 80006cc:	0052      	lsls	r2, r2, #1
 80006ce:	fa01 f202 	lsl.w	r2, r1, r2
 80006d2:	4611      	mov	r1, r2
 80006d4:	4a09      	ldr	r2, [pc, #36]	; (80006fc <MGPIO_voidSetPinMode+0xe8>)
 80006d6:	430b      	orrs	r3, r1
 80006d8:	6013      	str	r3, [r2, #0]
 80006da:	e000      	b.n	80006de <MGPIO_voidSetPinMode+0xca>

	default :  /*Error*/   break ;
 80006dc:	bf00      	nop
	}	
}
 80006de:	bf00      	nop
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr
 80006e8:	40020000 	.word	0x40020000
 80006ec:	40020400 	.word	0x40020400
 80006f0:	40020800 	.word	0x40020800
 80006f4:	40020c00 	.word	0x40020c00
 80006f8:	40021000 	.word	0x40021000
 80006fc:	40021c00 	.word	0x40021c00

08000700 <MGPIO_voidSetPinValue>:
/* 2- Function Input       -> Copy_u8PortName ,   Copy_u8PinNum  , Copy_u8PinValue                     */                   
/* 3- Function Return      -> NO THING                                                                 */
/*******************************************************************************************************/

void MGPIO_voidSetPinValue(u8 Copy_u8PortName ,u8 Copy_u8PinNum, u8 Copy_u8PinValue)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
 800070a:	460b      	mov	r3, r1
 800070c:	71bb      	strb	r3, [r7, #6]
 800070e:	4613      	mov	r3, r2
 8000710:	717b      	strb	r3, [r7, #5]
	if(Copy_u8PinValue == MGPIO_HIGH)
 8000712:	797b      	ldrb	r3, [r7, #5]
 8000714:	2b01      	cmp	r3, #1
 8000716:	d14f      	bne.n	80007b8 <MGPIO_voidSetPinValue+0xb8>
	{
		switch(Copy_u8PortName)
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	2b05      	cmp	r3, #5
 800071c:	f200 80a0 	bhi.w	8000860 <MGPIO_voidSetPinValue+0x160>
 8000720:	a201      	add	r2, pc, #4	; (adr r2, 8000728 <MGPIO_voidSetPinValue+0x28>)
 8000722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000726:	bf00      	nop
 8000728:	08000741 	.word	0x08000741
 800072c:	08000755 	.word	0x08000755
 8000730:	08000769 	.word	0x08000769
 8000734:	0800077d 	.word	0x0800077d
 8000738:	08000791 	.word	0x08000791
 800073c:	080007a5 	.word	0x080007a5
		{
		case MGPIOA_PORT : SET_BIT(MGPIOA->ODR,Copy_u8PinNum)  ; break ; 
 8000740:	4b4b      	ldr	r3, [pc, #300]	; (8000870 <MGPIO_voidSetPinValue+0x170>)
 8000742:	695a      	ldr	r2, [r3, #20]
 8000744:	79bb      	ldrb	r3, [r7, #6]
 8000746:	2101      	movs	r1, #1
 8000748:	fa01 f303 	lsl.w	r3, r1, r3
 800074c:	4948      	ldr	r1, [pc, #288]	; (8000870 <MGPIO_voidSetPinValue+0x170>)
 800074e:	4313      	orrs	r3, r2
 8000750:	614b      	str	r3, [r1, #20]
 8000752:	e088      	b.n	8000866 <MGPIO_voidSetPinValue+0x166>
		case MGPIOB_PORT : SET_BIT(MGPIOB->ODR,Copy_u8PinNum)  ; break ; 
 8000754:	4b47      	ldr	r3, [pc, #284]	; (8000874 <MGPIO_voidSetPinValue+0x174>)
 8000756:	695a      	ldr	r2, [r3, #20]
 8000758:	79bb      	ldrb	r3, [r7, #6]
 800075a:	2101      	movs	r1, #1
 800075c:	fa01 f303 	lsl.w	r3, r1, r3
 8000760:	4944      	ldr	r1, [pc, #272]	; (8000874 <MGPIO_voidSetPinValue+0x174>)
 8000762:	4313      	orrs	r3, r2
 8000764:	614b      	str	r3, [r1, #20]
 8000766:	e07e      	b.n	8000866 <MGPIO_voidSetPinValue+0x166>
		case MGPIOC_PORT : SET_BIT(MGPIOC->ODR,Copy_u8PinNum)  ; break ;
 8000768:	4b43      	ldr	r3, [pc, #268]	; (8000878 <MGPIO_voidSetPinValue+0x178>)
 800076a:	695a      	ldr	r2, [r3, #20]
 800076c:	79bb      	ldrb	r3, [r7, #6]
 800076e:	2101      	movs	r1, #1
 8000770:	fa01 f303 	lsl.w	r3, r1, r3
 8000774:	4940      	ldr	r1, [pc, #256]	; (8000878 <MGPIO_voidSetPinValue+0x178>)
 8000776:	4313      	orrs	r3, r2
 8000778:	614b      	str	r3, [r1, #20]
 800077a:	e074      	b.n	8000866 <MGPIO_voidSetPinValue+0x166>
		case MGPIOD_PORT : SET_BIT(MGPIOD->ODR,Copy_u8PinNum)  ; break ; 
 800077c:	4b3f      	ldr	r3, [pc, #252]	; (800087c <MGPIO_voidSetPinValue+0x17c>)
 800077e:	695a      	ldr	r2, [r3, #20]
 8000780:	79bb      	ldrb	r3, [r7, #6]
 8000782:	2101      	movs	r1, #1
 8000784:	fa01 f303 	lsl.w	r3, r1, r3
 8000788:	493c      	ldr	r1, [pc, #240]	; (800087c <MGPIO_voidSetPinValue+0x17c>)
 800078a:	4313      	orrs	r3, r2
 800078c:	614b      	str	r3, [r1, #20]
 800078e:	e06a      	b.n	8000866 <MGPIO_voidSetPinValue+0x166>
		case MGPIOE_PORT : SET_BIT(MGPIOE->ODR,Copy_u8PinNum)  ; break ; 
 8000790:	4b3b      	ldr	r3, [pc, #236]	; (8000880 <MGPIO_voidSetPinValue+0x180>)
 8000792:	695a      	ldr	r2, [r3, #20]
 8000794:	79bb      	ldrb	r3, [r7, #6]
 8000796:	2101      	movs	r1, #1
 8000798:	fa01 f303 	lsl.w	r3, r1, r3
 800079c:	4938      	ldr	r1, [pc, #224]	; (8000880 <MGPIO_voidSetPinValue+0x180>)
 800079e:	4313      	orrs	r3, r2
 80007a0:	614b      	str	r3, [r1, #20]
 80007a2:	e060      	b.n	8000866 <MGPIO_voidSetPinValue+0x166>
		case MGPIOH_PORT : SET_BIT(MGPIOH->ODR,Copy_u8PinNum)  ; break ; 	
 80007a4:	4b37      	ldr	r3, [pc, #220]	; (8000884 <MGPIO_voidSetPinValue+0x184>)
 80007a6:	695a      	ldr	r2, [r3, #20]
 80007a8:	79bb      	ldrb	r3, [r7, #6]
 80007aa:	2101      	movs	r1, #1
 80007ac:	fa01 f303 	lsl.w	r3, r1, r3
 80007b0:	4934      	ldr	r1, [pc, #208]	; (8000884 <MGPIO_voidSetPinValue+0x184>)
 80007b2:	4313      	orrs	r3, r2
 80007b4:	614b      	str	r3, [r1, #20]
 80007b6:	e056      	b.n	8000866 <MGPIO_voidSetPinValue+0x166>
		default :  /*Error*/   break ; 
		}
	}
	else
	{
		switch(Copy_u8PortName)
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	2b05      	cmp	r3, #5
 80007bc:	d852      	bhi.n	8000864 <MGPIO_voidSetPinValue+0x164>
 80007be:	a201      	add	r2, pc, #4	; (adr r2, 80007c4 <MGPIO_voidSetPinValue+0xc4>)
 80007c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007c4:	080007dd 	.word	0x080007dd
 80007c8:	080007f3 	.word	0x080007f3
 80007cc:	08000809 	.word	0x08000809
 80007d0:	0800081f 	.word	0x0800081f
 80007d4:	08000835 	.word	0x08000835
 80007d8:	0800084b 	.word	0x0800084b
		{
		case MGPIOA_PORT : CLR_BIT(MGPIOA->ODR,Copy_u8PinNum)  ; break ; 
 80007dc:	4b24      	ldr	r3, [pc, #144]	; (8000870 <MGPIO_voidSetPinValue+0x170>)
 80007de:	695a      	ldr	r2, [r3, #20]
 80007e0:	79bb      	ldrb	r3, [r7, #6]
 80007e2:	2101      	movs	r1, #1
 80007e4:	fa01 f303 	lsl.w	r3, r1, r3
 80007e8:	43db      	mvns	r3, r3
 80007ea:	4921      	ldr	r1, [pc, #132]	; (8000870 <MGPIO_voidSetPinValue+0x170>)
 80007ec:	4013      	ands	r3, r2
 80007ee:	614b      	str	r3, [r1, #20]
 80007f0:	e039      	b.n	8000866 <MGPIO_voidSetPinValue+0x166>
		case MGPIOB_PORT : CLR_BIT(MGPIOB->ODR,Copy_u8PinNum)  ; break ; 
 80007f2:	4b20      	ldr	r3, [pc, #128]	; (8000874 <MGPIO_voidSetPinValue+0x174>)
 80007f4:	695a      	ldr	r2, [r3, #20]
 80007f6:	79bb      	ldrb	r3, [r7, #6]
 80007f8:	2101      	movs	r1, #1
 80007fa:	fa01 f303 	lsl.w	r3, r1, r3
 80007fe:	43db      	mvns	r3, r3
 8000800:	491c      	ldr	r1, [pc, #112]	; (8000874 <MGPIO_voidSetPinValue+0x174>)
 8000802:	4013      	ands	r3, r2
 8000804:	614b      	str	r3, [r1, #20]
 8000806:	e02e      	b.n	8000866 <MGPIO_voidSetPinValue+0x166>
		case MGPIOC_PORT : CLR_BIT(MGPIOC->ODR,Copy_u8PinNum)  ; break ;
 8000808:	4b1b      	ldr	r3, [pc, #108]	; (8000878 <MGPIO_voidSetPinValue+0x178>)
 800080a:	695a      	ldr	r2, [r3, #20]
 800080c:	79bb      	ldrb	r3, [r7, #6]
 800080e:	2101      	movs	r1, #1
 8000810:	fa01 f303 	lsl.w	r3, r1, r3
 8000814:	43db      	mvns	r3, r3
 8000816:	4918      	ldr	r1, [pc, #96]	; (8000878 <MGPIO_voidSetPinValue+0x178>)
 8000818:	4013      	ands	r3, r2
 800081a:	614b      	str	r3, [r1, #20]
 800081c:	e023      	b.n	8000866 <MGPIO_voidSetPinValue+0x166>
		case MGPIOD_PORT : CLR_BIT(MGPIOD->ODR,Copy_u8PinNum)  ; break ; 
 800081e:	4b17      	ldr	r3, [pc, #92]	; (800087c <MGPIO_voidSetPinValue+0x17c>)
 8000820:	695a      	ldr	r2, [r3, #20]
 8000822:	79bb      	ldrb	r3, [r7, #6]
 8000824:	2101      	movs	r1, #1
 8000826:	fa01 f303 	lsl.w	r3, r1, r3
 800082a:	43db      	mvns	r3, r3
 800082c:	4913      	ldr	r1, [pc, #76]	; (800087c <MGPIO_voidSetPinValue+0x17c>)
 800082e:	4013      	ands	r3, r2
 8000830:	614b      	str	r3, [r1, #20]
 8000832:	e018      	b.n	8000866 <MGPIO_voidSetPinValue+0x166>
		case MGPIOE_PORT : CLR_BIT(MGPIOE->ODR,Copy_u8PinNum)  ; break ; 
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <MGPIO_voidSetPinValue+0x180>)
 8000836:	695a      	ldr	r2, [r3, #20]
 8000838:	79bb      	ldrb	r3, [r7, #6]
 800083a:	2101      	movs	r1, #1
 800083c:	fa01 f303 	lsl.w	r3, r1, r3
 8000840:	43db      	mvns	r3, r3
 8000842:	490f      	ldr	r1, [pc, #60]	; (8000880 <MGPIO_voidSetPinValue+0x180>)
 8000844:	4013      	ands	r3, r2
 8000846:	614b      	str	r3, [r1, #20]
 8000848:	e00d      	b.n	8000866 <MGPIO_voidSetPinValue+0x166>
		case MGPIOH_PORT : CLR_BIT(MGPIOH->ODR,Copy_u8PinNum)  ; break ; 	
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MGPIO_voidSetPinValue+0x184>)
 800084c:	695a      	ldr	r2, [r3, #20]
 800084e:	79bb      	ldrb	r3, [r7, #6]
 8000850:	2101      	movs	r1, #1
 8000852:	fa01 f303 	lsl.w	r3, r1, r3
 8000856:	43db      	mvns	r3, r3
 8000858:	490a      	ldr	r1, [pc, #40]	; (8000884 <MGPIO_voidSetPinValue+0x184>)
 800085a:	4013      	ands	r3, r2
 800085c:	614b      	str	r3, [r1, #20]
 800085e:	e002      	b.n	8000866 <MGPIO_voidSetPinValue+0x166>
		default :  /*Error*/   break ; 
 8000860:	bf00      	nop
 8000862:	e000      	b.n	8000866 <MGPIO_voidSetPinValue+0x166>
		default :  /*Error*/   break ; 
 8000864:	bf00      	nop
		}
	}
}
 8000866:	bf00      	nop
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr
 8000870:	40020000 	.word	0x40020000
 8000874:	40020400 	.word	0x40020400
 8000878:	40020800 	.word	0x40020800
 800087c:	40020c00 	.word	0x40020c00
 8000880:	40021000 	.word	0x40021000
 8000884:	40021c00 	.word	0x40021c00

08000888 <MRCC_voidEnablePeripheralClock>:
   @param[in]   Copy_uddtBusName  : The Bus of The Peripheral [AHB1 , AHB2 , APB1 ,APB2] Every one  Detect 
   Which REG to Choise Peripherial From It   
   @param[in]   Copy_u8PerNum  : The order of Peripheral On The Selected Register
 */
void MRCC_voidEnablePeripheralClock(BusName_t Copy_uddtBusName,u8 Copy_u8PerNum)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	460a      	mov	r2, r1
 8000892:	71fb      	strb	r3, [r7, #7]
 8000894:	4613      	mov	r3, r2
 8000896:	71bb      	strb	r3, [r7, #6]
	switch(Copy_uddtBusName)
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	2b07      	cmp	r3, #7
 800089c:	d862      	bhi.n	8000964 <MRCC_voidEnablePeripheralClock+0xdc>
 800089e:	a201      	add	r2, pc, #4	; (adr r2, 80008a4 <MRCC_voidEnablePeripheralClock+0x1c>)
 80008a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a4:	080008c5 	.word	0x080008c5
 80008a8:	080008d9 	.word	0x080008d9
 80008ac:	080008ed 	.word	0x080008ed
 80008b0:	08000901 	.word	0x08000901
 80008b4:	08000915 	.word	0x08000915
 80008b8:	08000929 	.word	0x08000929
 80008bc:	0800093d 	.word	0x0800093d
 80008c0:	08000951 	.word	0x08000951
	{  
	case AHB1  :    SET_BIT(RCC_AHB1ENR,Copy_u8PerNum) ; break ;
 80008c4:	4b2a      	ldr	r3, [pc, #168]	; (8000970 <MRCC_voidEnablePeripheralClock+0xe8>)
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	79bb      	ldrb	r3, [r7, #6]
 80008ca:	2101      	movs	r1, #1
 80008cc:	fa01 f303 	lsl.w	r3, r1, r3
 80008d0:	4927      	ldr	r1, [pc, #156]	; (8000970 <MRCC_voidEnablePeripheralClock+0xe8>)
 80008d2:	4313      	orrs	r3, r2
 80008d4:	600b      	str	r3, [r1, #0]
 80008d6:	e046      	b.n	8000966 <MRCC_voidEnablePeripheralClock+0xde>
	case AHB2  :    SET_BIT(RCC_AHB2ENR,Copy_u8PerNum) ; break ;
 80008d8:	4b26      	ldr	r3, [pc, #152]	; (8000974 <MRCC_voidEnablePeripheralClock+0xec>)
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	79bb      	ldrb	r3, [r7, #6]
 80008de:	2101      	movs	r1, #1
 80008e0:	fa01 f303 	lsl.w	r3, r1, r3
 80008e4:	4923      	ldr	r1, [pc, #140]	; (8000974 <MRCC_voidEnablePeripheralClock+0xec>)
 80008e6:	4313      	orrs	r3, r2
 80008e8:	600b      	str	r3, [r1, #0]
 80008ea:	e03c      	b.n	8000966 <MRCC_voidEnablePeripheralClock+0xde>
	case APB1  :    SET_BIT(RCC_APB1ENR,Copy_u8PerNum) ; break ;
 80008ec:	4b22      	ldr	r3, [pc, #136]	; (8000978 <MRCC_voidEnablePeripheralClock+0xf0>)
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	79bb      	ldrb	r3, [r7, #6]
 80008f2:	2101      	movs	r1, #1
 80008f4:	fa01 f303 	lsl.w	r3, r1, r3
 80008f8:	491f      	ldr	r1, [pc, #124]	; (8000978 <MRCC_voidEnablePeripheralClock+0xf0>)
 80008fa:	4313      	orrs	r3, r2
 80008fc:	600b      	str	r3, [r1, #0]
 80008fe:	e032      	b.n	8000966 <MRCC_voidEnablePeripheralClock+0xde>
	case APB2  :    SET_BIT(RCC_APB2ENR,Copy_u8PerNum) ; break ;
 8000900:	4b1e      	ldr	r3, [pc, #120]	; (800097c <MRCC_voidEnablePeripheralClock+0xf4>)
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	79bb      	ldrb	r3, [r7, #6]
 8000906:	2101      	movs	r1, #1
 8000908:	fa01 f303 	lsl.w	r3, r1, r3
 800090c:	491b      	ldr	r1, [pc, #108]	; (800097c <MRCC_voidEnablePeripheralClock+0xf4>)
 800090e:	4313      	orrs	r3, r2
 8000910:	600b      	str	r3, [r1, #0]
 8000912:	e028      	b.n	8000966 <MRCC_voidEnablePeripheralClock+0xde>
	case AHB1LP:	SET_BIT(RCC_AHB1LPENR,Copy_u8PerNum);   break;
 8000914:	4b1a      	ldr	r3, [pc, #104]	; (8000980 <MRCC_voidEnablePeripheralClock+0xf8>)
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	79bb      	ldrb	r3, [r7, #6]
 800091a:	2101      	movs	r1, #1
 800091c:	fa01 f303 	lsl.w	r3, r1, r3
 8000920:	4917      	ldr	r1, [pc, #92]	; (8000980 <MRCC_voidEnablePeripheralClock+0xf8>)
 8000922:	4313      	orrs	r3, r2
 8000924:	600b      	str	r3, [r1, #0]
 8000926:	e01e      	b.n	8000966 <MRCC_voidEnablePeripheralClock+0xde>
	case AHB2LP:	SET_BIT(RCC_AHB2LPENR,Copy_u8PerNum);   break;
 8000928:	4b16      	ldr	r3, [pc, #88]	; (8000984 <MRCC_voidEnablePeripheralClock+0xfc>)
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	79bb      	ldrb	r3, [r7, #6]
 800092e:	2101      	movs	r1, #1
 8000930:	fa01 f303 	lsl.w	r3, r1, r3
 8000934:	4913      	ldr	r1, [pc, #76]	; (8000984 <MRCC_voidEnablePeripheralClock+0xfc>)
 8000936:	4313      	orrs	r3, r2
 8000938:	600b      	str	r3, [r1, #0]
 800093a:	e014      	b.n	8000966 <MRCC_voidEnablePeripheralClock+0xde>
	case APB1LP:	SET_BIT(RCC_APB1LPENR,Copy_u8PerNum);   break;
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <MRCC_voidEnablePeripheralClock+0x100>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	79bb      	ldrb	r3, [r7, #6]
 8000942:	2101      	movs	r1, #1
 8000944:	fa01 f303 	lsl.w	r3, r1, r3
 8000948:	490f      	ldr	r1, [pc, #60]	; (8000988 <MRCC_voidEnablePeripheralClock+0x100>)
 800094a:	4313      	orrs	r3, r2
 800094c:	600b      	str	r3, [r1, #0]
 800094e:	e00a      	b.n	8000966 <MRCC_voidEnablePeripheralClock+0xde>
	case APB2LP:	SET_BIT(RCC_APB2LPENR,Copy_u8PerNum);   break;
 8000950:	4b0e      	ldr	r3, [pc, #56]	; (800098c <MRCC_voidEnablePeripheralClock+0x104>)
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	79bb      	ldrb	r3, [r7, #6]
 8000956:	2101      	movs	r1, #1
 8000958:	fa01 f303 	lsl.w	r3, r1, r3
 800095c:	490b      	ldr	r1, [pc, #44]	; (800098c <MRCC_voidEnablePeripheralClock+0x104>)
 800095e:	4313      	orrs	r3, r2
 8000960:	600b      	str	r3, [r1, #0]
 8000962:	e000      	b.n	8000966 <MRCC_voidEnablePeripheralClock+0xde>
	default    : /* ERROR*/         break ;
 8000964:	bf00      	nop
	}

}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr
 8000970:	40023830 	.word	0x40023830
 8000974:	40023834 	.word	0x40023834
 8000978:	40023840 	.word	0x40023840
 800097c:	40023844 	.word	0x40023844
 8000980:	40023850 	.word	0x40023850
 8000984:	40023854 	.word	0x40023854
 8000988:	40023860 	.word	0x40023860
 800098c:	40023864 	.word	0x40023864

08000990 <MRCC_voidInitSystemClk>:
/*
   @fu MRCC_voidInitSystemClk 
   @brief   This Function used To Initializaion for System clock   
 */
void MRCC_voidInitSystemClk(void)
{   
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
	/***************HSI************/
#if MRCC_CLKSRC == HSI
	/*1- Enable HSI */
	SET_BIT(RCC_CR,0U);
 8000994:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <MRCC_voidInitSystemClk+0x30>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a09      	ldr	r2, [pc, #36]	; (80009c0 <MRCC_voidInitSystemClk+0x30>)
 800099a:	f043 0301 	orr.w	r3, r3, #1
 800099e:	6013      	str	r3, [r2, #0]
	/*2-Clk System -->HSI */
	CLR_BIT(RCC_CFGR,0U);
 80009a0:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <MRCC_voidInitSystemClk+0x34>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a07      	ldr	r2, [pc, #28]	; (80009c4 <MRCC_voidInitSystemClk+0x34>)
 80009a6:	f023 0301 	bic.w	r3, r3, #1
 80009aa:	6013      	str	r3, [r2, #0]
	CLR_BIT(RCC_CFGR,1U);
 80009ac:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <MRCC_voidInitSystemClk+0x34>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a04      	ldr	r2, [pc, #16]	; (80009c4 <MRCC_voidInitSystemClk+0x34>)
 80009b2:	f023 0302 	bic.w	r3, r3, #2
 80009b6:	6013      	str	r3, [r2, #0]
#error "Invalid Option For Clock Source  ..... "
#endif
	/*#####################################################################*/
	/*                  THE END OF PROGRAM FILE                      */
	/*#####################################################################*/
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40023808 	.word	0x40023808

080009c8 <MSTK_voidInit>:
/*******************************************************************************************************/



void MSTK_voidInit(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0

	/* Disable Systick Interrupt - Stop Systick - CLOCK Source = AHB / 8 */
	MSTK->CTRL = 0x00000000 ;   //Clr_ALL_BITS(MSTK->CTRL) ;
 80009cc:	4b03      	ldr	r3, [pc, #12]	; (80009dc <MSTK_voidInit+0x14>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]


}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	e000e010 	.word	0xe000e010

080009e0 <MSTK_u8ReadFlag>:
/* 1- Function Description ->                                                                          */
/* 2- Function Input                                                                                   */
/* 3- Function Return      -> No Thing                                                                 */
/*******************************************************************************************************/
u8 MSTK_u8ReadFlag(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
	return (GET_BIT(MSTK->CTRL , 16)) ;
 80009e4:	4b05      	ldr	r3, [pc, #20]	; (80009fc <MSTK_u8ReadFlag+0x1c>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	0c1b      	lsrs	r3, r3, #16
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	f003 0301 	and.w	r3, r3, #1
 80009f0:	b2db      	uxtb	r3, r3
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	e000e010 	.word	0xe000e010

08000a00 <SysTick_Handler>:
}



void SysTick_Handler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0

	volatile u8 LOC_u8Temp = 0 ;
 8000a06:	2300      	movs	r3, #0
 8000a08:	71fb      	strb	r3, [r7, #7]
  /*Call Back Notification*/
	MSTK_CallBack() ;
 8000a0a:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <SysTick_Handler+0x20>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4798      	blx	r3

	/*Clear Flag */
	LOC_u8Temp  = MSTK_u8ReadFlag()  ;
 8000a10:	f7ff ffe6 	bl	80009e0 <MSTK_u8ReadFlag>
 8000a14:	4603      	mov	r3, r0
 8000a16:	71fb      	strb	r3, [r7, #7]

}
 8000a18:	bf00      	nop
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	2000015c 	.word	0x2000015c

08000a24 <MSTK_voidSetIntervalSingle>:


void MSTK_voidSetIntervalSingle(u32 Copy_u32Us, void (*CopyPtr)(void))
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
  /*Disable Timer*/
	MSTK->CTRL = 0x00000000 ;
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <MSTK_voidSetIntervalSingle+0x48>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]

	/*Load ticks to load register --> 1 tick = 0.5 micro sec*/
	MSTK->LOAD = 2 * Copy_u32Us ;
 8000a34:	4a0d      	ldr	r2, [pc, #52]	; (8000a6c <MSTK_voidSetIntervalSingle+0x48>)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	6053      	str	r3, [r2, #4]

	MSTK->VAL = 0 ;
 8000a3c:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <MSTK_voidSetIntervalSingle+0x48>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]

	/*Start Timer*/
	SET_BIT(MSTK->CTRL,0) ;
 8000a42:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <MSTK_voidSetIntervalSingle+0x48>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a09      	ldr	r2, [pc, #36]	; (8000a6c <MSTK_voidSetIntervalSingle+0x48>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6013      	str	r3, [r2, #0]

	/*Save CallBack*/
	MSTK_CallBack  = CopyPtr ;
 8000a4e:	4a08      	ldr	r2, [pc, #32]	; (8000a70 <MSTK_voidSetIntervalSingle+0x4c>)
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	6013      	str	r3, [r2, #0]


	/*Enable Interrupt*/
	SET_BIT(MSTK->CTRL,1) ;
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <MSTK_voidSetIntervalSingle+0x48>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a04      	ldr	r2, [pc, #16]	; (8000a6c <MSTK_voidSetIntervalSingle+0x48>)
 8000a5a:	f043 0302 	orr.w	r3, r3, #2
 8000a5e:	6013      	str	r3, [r2, #0]

}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bc80      	pop	{r7}
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000e010 	.word	0xe000e010
 8000a70:	2000015c 	.word	0x2000015c

08000a74 <MUSART_voidInit>:

static void(*MUSART_CALLPTR)(void)   = NULL ;


void MUSART_voidInit(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0

	/*Set Boaud Rate*/
	MUSART1->BRR = 0x0000008B ;   //baudRate 115200 bps
 8000a78:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <MUSART_voidInit+0x5c>)
 8000a7a:	228b      	movs	r2, #139	; 0x8b
 8000a7c:	609a      	str	r2, [r3, #8]
	/*OverSampling 16 Sample*/
	MUSART1->CR1.OVER8 = 0 ;   //BitField
 8000a7e:	4a14      	ldr	r2, [pc, #80]	; (8000ad0 <MUSART_voidInit+0x5c>)
 8000a80:	68d3      	ldr	r3, [r2, #12]
 8000a82:	f36f 33cf 	bfc	r3, #15, #1
 8000a86:	60d3      	str	r3, [r2, #12]
	/*8 Bit Word size*/
	MUSART1->CR1.M = 0 ;
 8000a88:	4a11      	ldr	r2, [pc, #68]	; (8000ad0 <MUSART_voidInit+0x5c>)
 8000a8a:	68d3      	ldr	r3, [r2, #12]
 8000a8c:	f36f 330c 	bfc	r3, #12, #1
 8000a90:	60d3      	str	r3, [r2, #12]
	/*Disable Parity*/
	MUSART1->CR1.PCE = 	0 ;
 8000a92:	4a0f      	ldr	r2, [pc, #60]	; (8000ad0 <MUSART_voidInit+0x5c>)
 8000a94:	68d3      	ldr	r3, [r2, #12]
 8000a96:	f36f 238a 	bfc	r3, #10, #1
 8000a9a:	60d3      	str	r3, [r2, #12]
	/*one Stop Bit*/
	CLR_BIT(MUSART1->CR2,12);
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <MUSART_voidInit+0x5c>)
 8000a9e:	691b      	ldr	r3, [r3, #16]
 8000aa0:	4a0b      	ldr	r2, [pc, #44]	; (8000ad0 <MUSART_voidInit+0x5c>)
 8000aa2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000aa6:	6113      	str	r3, [r2, #16]
	CLR_BIT(MUSART1->CR2,13);
 8000aa8:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <MUSART_voidInit+0x5c>)
 8000aaa:	691b      	ldr	r3, [r3, #16]
 8000aac:	4a08      	ldr	r2, [pc, #32]	; (8000ad0 <MUSART_voidInit+0x5c>)
 8000aae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000ab2:	6113      	str	r3, [r2, #16]
	/*Enable Transmitter */
	MUSART1->CR1.TE = 1 ;
 8000ab4:	4a06      	ldr	r2, [pc, #24]	; (8000ad0 <MUSART_voidInit+0x5c>)
 8000ab6:	68d3      	ldr	r3, [r2, #12]
 8000ab8:	f043 0308 	orr.w	r3, r3, #8
 8000abc:	60d3      	str	r3, [r2, #12]
	/*Enable Receiver*/
	MUSART1->CR1.RE = 1 ;
 8000abe:	4a04      	ldr	r2, [pc, #16]	; (8000ad0 <MUSART_voidInit+0x5c>)
 8000ac0:	68d3      	ldr	r3, [r2, #12]
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	60d3      	str	r3, [r2, #12]
	/*Receive interrupt  Enable*/
	//MUSART1->CR1.RXNEIE = 1 ;
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr
 8000ad0:	40011000 	.word	0x40011000

08000ad4 <MUSART_u8ReadDataSynch>:
	return (u8) MUSART1->DR  ;
}


u8 MUSART_u8ReadDataSynch(u8 *Copy_u8DataCome)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
	u8 LOC_u8Status = 1 ;
 8000adc:	2301      	movs	r3, #1
 8000ade:	73fb      	strb	r3, [r7, #15]
	//while(!GET_BIT(MUSART1->SR,5));
	if(GET_BIT(MUSART1->SR,5) == 1)
 8000ae0:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <MUSART_u8ReadDataSynch+0x38>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	095b      	lsrs	r3, r3, #5
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d105      	bne.n	8000afa <MUSART_u8ReadDataSynch+0x26>
	{
		*Copy_u8DataCome = MUSART1->DR  ;
 8000aee:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <MUSART_u8ReadDataSynch+0x38>)
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	701a      	strb	r2, [r3, #0]
 8000af8:	e001      	b.n	8000afe <MUSART_u8ReadDataSynch+0x2a>
	}
	else
	{
		LOC_u8Status = 0 ;
 8000afa:	2300      	movs	r3, #0
 8000afc:	73fb      	strb	r3, [r7, #15]
	}

	return  LOC_u8Status ;
 8000afe:	7bfb      	ldrb	r3, [r7, #15]

}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3714      	adds	r7, #20
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bc80      	pop	{r7}
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	40011000 	.word	0x40011000

08000b10 <MUSART_voidEnable>:

void MUSART_voidEnable(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
	/*UART Enable*/
	MUSART1->CR1.UE =  1 ;
 8000b14:	4a04      	ldr	r2, [pc, #16]	; (8000b28 <MUSART_voidEnable+0x18>)
 8000b16:	68d3      	ldr	r3, [r2, #12]
 8000b18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b1c:	60d3      	str	r3, [r2, #12]
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	40011000 	.word	0x40011000

08000b2c <USART1_IRQHandler>:




void USART1_IRQHandler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
	MUSART_CALLPTR() ;
 8000b30:	4b02      	ldr	r3, [pc, #8]	; (8000b3c <USART1_IRQHandler+0x10>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4798      	blx	r3
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000160 	.word	0x20000160

08000b40 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
	/*call the function to init the application*/
	ABL_VoidInit();
 8000b44:	f7ff fb14 	bl	8000170 <ABL_VoidInit>
	/*call function to run the application*/
	ABL_VoidRun();
 8000b48:	f7ff fb3c 	bl	80001c4 <ABL_VoidRun>
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	bd80      	pop	{r7, pc}
	...

08000b54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b54:	480d      	ldr	r0, [pc, #52]	; (8000b8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b56:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b58:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b5c:	480c      	ldr	r0, [pc, #48]	; (8000b90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b5e:	490d      	ldr	r1, [pc, #52]	; (8000b94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b60:	4a0d      	ldr	r2, [pc, #52]	; (8000b98 <LoopForever+0xe>)
  movs r3, #0
 8000b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b64:	e002      	b.n	8000b6c <LoopCopyDataInit>

08000b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b6a:	3304      	adds	r3, #4

08000b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b70:	d3f9      	bcc.n	8000b66 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b72:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b74:	4c0a      	ldr	r4, [pc, #40]	; (8000ba0 <LoopForever+0x16>)
  movs r3, #0
 8000b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b78:	e001      	b.n	8000b7e <LoopFillZerobss>

08000b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b7c:	3204      	adds	r2, #4

08000b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b80:	d3fb      	bcc.n	8000b7a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b82:	f000 f811 	bl	8000ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b86:	f7ff ffdb 	bl	8000b40 <main>

08000b8a <LoopForever>:

LoopForever:
  b LoopForever
 8000b8a:	e7fe      	b.n	8000b8a <LoopForever>
  ldr   r0, =_estack
 8000b8c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b94:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000b98:	08000c10 	.word	0x08000c10
  ldr r2, =_sbss
 8000b9c:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000ba0:	20000164 	.word	0x20000164

08000ba4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ba4:	e7fe      	b.n	8000ba4 <ADC1_2_IRQHandler>
	...

08000ba8 <__libc_init_array>:
 8000ba8:	b570      	push	{r4, r5, r6, lr}
 8000baa:	2600      	movs	r6, #0
 8000bac:	4d0c      	ldr	r5, [pc, #48]	; (8000be0 <__libc_init_array+0x38>)
 8000bae:	4c0d      	ldr	r4, [pc, #52]	; (8000be4 <__libc_init_array+0x3c>)
 8000bb0:	1b64      	subs	r4, r4, r5
 8000bb2:	10a4      	asrs	r4, r4, #2
 8000bb4:	42a6      	cmp	r6, r4
 8000bb6:	d109      	bne.n	8000bcc <__libc_init_array+0x24>
 8000bb8:	f000 f81a 	bl	8000bf0 <_init>
 8000bbc:	2600      	movs	r6, #0
 8000bbe:	4d0a      	ldr	r5, [pc, #40]	; (8000be8 <__libc_init_array+0x40>)
 8000bc0:	4c0a      	ldr	r4, [pc, #40]	; (8000bec <__libc_init_array+0x44>)
 8000bc2:	1b64      	subs	r4, r4, r5
 8000bc4:	10a4      	asrs	r4, r4, #2
 8000bc6:	42a6      	cmp	r6, r4
 8000bc8:	d105      	bne.n	8000bd6 <__libc_init_array+0x2e>
 8000bca:	bd70      	pop	{r4, r5, r6, pc}
 8000bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bd0:	4798      	blx	r3
 8000bd2:	3601      	adds	r6, #1
 8000bd4:	e7ee      	b.n	8000bb4 <__libc_init_array+0xc>
 8000bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bda:	4798      	blx	r3
 8000bdc:	3601      	adds	r6, #1
 8000bde:	e7f2      	b.n	8000bc6 <__libc_init_array+0x1e>
 8000be0:	08000c08 	.word	0x08000c08
 8000be4:	08000c08 	.word	0x08000c08
 8000be8:	08000c08 	.word	0x08000c08
 8000bec:	08000c0c 	.word	0x08000c0c

08000bf0 <_init>:
 8000bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bf2:	bf00      	nop
 8000bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bf6:	bc08      	pop	{r3}
 8000bf8:	469e      	mov	lr, r3
 8000bfa:	4770      	bx	lr

08000bfc <_fini>:
 8000bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bfe:	bf00      	nop
 8000c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c02:	bc08      	pop	{r3}
 8000c04:	469e      	mov	lr, r3
 8000c06:	4770      	bx	lr
